Typescript
- helps catch errors during development
- uses 'type annotations' to analyze code
- only relevant during development
- no perf benefits
- help to self-document the code

Type annotation
- explicitly telling TS what type of value a variable is
const apples: number = 5;
const speed: string = 'fast';
const hasName: boolean = true;
const nothingMuch: null = null;
const nothing: undefined = undefined;
const now: Date = new Date();
// Type of array that contains strings
const colors: string[] = ['red', 'green', 'blue'];
const numbers: number[] = [1,2,3];
const truths: boolean[] = [true, true, false];
// classes
class Car {}
const car: Car = new Car();
// object literal
const point: { x: number; y: number } = { x: 10, y: 20 };
// function
const logNumber: (i: number) => void = (i) => { console.log(i) };
// None of the above annotations are necessary b/c they get inferred

1. useful when type 'any' is inferred
- 'any' type: means TS doesn't know what type it is
const json = '{"x": 10, "y": 20}';
const coordinates: { x: number; y: number } = JSON.parse(json);

2. useful when we declare a variable on one line but initialize it later
let words = ['red', 'blue', 'green'];
let foundWord: boolean;

for (let i = 0; i < words.length; i++) {
  if (words[i] === 'green') {
    foundWord = true;
  }
}

3. type cannot be inferred
let numbers = [-10, -1, 12];
let numberAboveZero: boolean | number = false;

for (let i = 0; i < numbers.length; i++) {
  if (numbers[i] > 0) {
    numberAboveZero = numbers[i];
  }
}

Type inference
- TS tries to figure out what type of value a variable is
- only works when declaration and initialization are on the same line:
// const apples: number = 5;

Type annotations for function
- code we add to tell TS what type of args a function will receive and what type of values it will return
// annotates a and b as a number and the return as a number
const add = (a: number, b: number): number => {
  return a + b;
};

Type inference for functions
- TS tries to figure out what type of value a function will return
- type inference happens on function returns but not on function args
- returns are good to annotate
-- if you forget to annotate the returns and forget to return, TS will infer void as the return type